// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.6.1
// source: yandex/cloud/mdb/kafka/v1/connector.proto

package kafka

import (
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Connector_Health int32

const (
	// State of the connector is unknown.
	Connector_HEALTH_UNKNOWN Connector_Health = 0
	// Connector is running.
	Connector_ALIVE Connector_Health = 1
	// Connector is failed to start.
	Connector_DEAD Connector_Health = 2
)

// Enum value maps for Connector_Health.
var (
	Connector_Health_name = map[int32]string{
		0: "HEALTH_UNKNOWN",
		1: "ALIVE",
		2: "DEAD",
	}
	Connector_Health_value = map[string]int32{
		"HEALTH_UNKNOWN": 0,
		"ALIVE":          1,
		"DEAD":           2,
	}
)

func (x Connector_Health) Enum() *Connector_Health {
	p := new(Connector_Health)
	*p = x
	return p
}

func (x Connector_Health) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Connector_Health) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_mdb_kafka_v1_connector_proto_enumTypes[0].Descriptor()
}

func (Connector_Health) Type() protoreflect.EnumType {
	return &file_yandex_cloud_mdb_kafka_v1_connector_proto_enumTypes[0]
}

func (x Connector_Health) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Connector_Health.Descriptor instead.
func (Connector_Health) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_kafka_v1_connector_proto_rawDescGZIP(), []int{5, 0}
}

type Connector_Status int32

const (
	// Connector state is unknown.
	Connector_STATUS_UNKNOWN Connector_Status = 0
	// Connector is running normally.
	Connector_RUNNING Connector_Status = 1
	// Connector encountered a problem and cannot operate.
	Connector_ERROR Connector_Status = 2
	// Connector paused.
	Connector_PAUSED Connector_Status = 3
)

// Enum value maps for Connector_Status.
var (
	Connector_Status_name = map[int32]string{
		0: "STATUS_UNKNOWN",
		1: "RUNNING",
		2: "ERROR",
		3: "PAUSED",
	}
	Connector_Status_value = map[string]int32{
		"STATUS_UNKNOWN": 0,
		"RUNNING":        1,
		"ERROR":          2,
		"PAUSED":         3,
	}
)

func (x Connector_Status) Enum() *Connector_Status {
	p := new(Connector_Status)
	*p = x
	return p
}

func (x Connector_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Connector_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_mdb_kafka_v1_connector_proto_enumTypes[1].Descriptor()
}

func (Connector_Status) Type() protoreflect.EnumType {
	return &file_yandex_cloud_mdb_kafka_v1_connector_proto_enumTypes[1]
}

func (x Connector_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Connector_Status.Descriptor instead.
func (Connector_Status) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_kafka_v1_connector_proto_rawDescGZIP(), []int{5, 1}
}

// An Apache Kafka® connector specification
type ConnectorSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the connector.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Maximum number of connector tasks.
	// Default is the number of brokers.
	TasksMax *wrappers.Int64Value `protobuf:"bytes,2,opt,name=tasks_max,json=tasksMax,proto3" json:"tasks_max,omitempty"`
	// Properties passed with connector config to Connect service.
	// Example: 'sync.topics.config.enabled: true'.
	Properties map[string]string `protobuf:"bytes,3,rep,name=properties,proto3" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Additional settings
	// for specific connector.
	// For example, of MirrorMaker.
	//
	// Types that are assignable to ConnectorConfig:
	//	*ConnectorSpec_ConnectorConfigMirrormaker
	ConnectorConfig isConnectorSpec_ConnectorConfig `protobuf_oneof:"connector_config"`
}

func (x *ConnectorSpec) Reset() {
	*x = ConnectorSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_mdb_kafka_v1_connector_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectorSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectorSpec) ProtoMessage() {}

func (x *ConnectorSpec) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_kafka_v1_connector_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectorSpec.ProtoReflect.Descriptor instead.
func (*ConnectorSpec) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_kafka_v1_connector_proto_rawDescGZIP(), []int{0}
}

func (x *ConnectorSpec) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ConnectorSpec) GetTasksMax() *wrappers.Int64Value {
	if x != nil {
		return x.TasksMax
	}
	return nil
}

func (x *ConnectorSpec) GetProperties() map[string]string {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (m *ConnectorSpec) GetConnectorConfig() isConnectorSpec_ConnectorConfig {
	if m != nil {
		return m.ConnectorConfig
	}
	return nil
}

func (x *ConnectorSpec) GetConnectorConfigMirrormaker() *ConnectorConfigMirrorMakerSpec {
	if x, ok := x.GetConnectorConfig().(*ConnectorSpec_ConnectorConfigMirrormaker); ok {
		return x.ConnectorConfigMirrormaker
	}
	return nil
}

type isConnectorSpec_ConnectorConfig interface {
	isConnectorSpec_ConnectorConfig()
}

type ConnectorSpec_ConnectorConfigMirrormaker struct {
	// Configuration of MirrorMaker connector
	ConnectorConfigMirrormaker *ConnectorConfigMirrorMakerSpec `protobuf:"bytes,10,opt,name=connector_config_mirrormaker,json=connectorConfigMirrormaker,proto3,oneof"`
}

func (*ConnectorSpec_ConnectorConfigMirrormaker) isConnectorSpec_ConnectorConfig() {}

// An An Apache Kafka® MirrorMaker
// connector specification.
type ConnectorConfigMirrorMakerSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Source cluster configuration.
	SourceCluster *ClusterConnectionSpec `protobuf:"bytes,1,opt,name=source_cluster,json=sourceCluster,proto3" json:"source_cluster,omitempty"`
	// Target cluster configuration.
	TargetCluster *ClusterConnectionSpec `protobuf:"bytes,2,opt,name=target_cluster,json=targetCluster,proto3" json:"target_cluster,omitempty"`
	// List of Kafka topics, separated by ','
	Topics string `protobuf:"bytes,3,opt,name=topics,proto3" json:"topics,omitempty"`
	// Replication factor for automatically created topics.
	ReplicationFactor *wrappers.Int64Value `protobuf:"bytes,4,opt,name=replication_factor,json=replicationFactor,proto3" json:"replication_factor,omitempty"`
}

func (x *ConnectorConfigMirrorMakerSpec) Reset() {
	*x = ConnectorConfigMirrorMakerSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_mdb_kafka_v1_connector_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectorConfigMirrorMakerSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectorConfigMirrorMakerSpec) ProtoMessage() {}

func (x *ConnectorConfigMirrorMakerSpec) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_kafka_v1_connector_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectorConfigMirrorMakerSpec.ProtoReflect.Descriptor instead.
func (*ConnectorConfigMirrorMakerSpec) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_kafka_v1_connector_proto_rawDescGZIP(), []int{1}
}

func (x *ConnectorConfigMirrorMakerSpec) GetSourceCluster() *ClusterConnectionSpec {
	if x != nil {
		return x.SourceCluster
	}
	return nil
}

func (x *ConnectorConfigMirrorMakerSpec) GetTargetCluster() *ClusterConnectionSpec {
	if x != nil {
		return x.TargetCluster
	}
	return nil
}

func (x *ConnectorConfigMirrorMakerSpec) GetTopics() string {
	if x != nil {
		return x.Topics
	}
	return ""
}

func (x *ConnectorConfigMirrorMakerSpec) GetReplicationFactor() *wrappers.Int64Value {
	if x != nil {
		return x.ReplicationFactor
	}
	return nil
}

// Specification of ClusterConnection -
// connection to clusters, that
// are source or target of MirrorMaker
// clusters.
type ClusterConnectionSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Alias of ClusterConnection.
	// For example: 'source', 'target', ...
	Alias string `protobuf:"bytes,1,opt,name=alias,proto3" json:"alias,omitempty"`
	// Type of connection to Kafka cluster.
	//
	// Types that are assignable to ClusterConnection:
	//	*ClusterConnectionSpec_ThisCluster
	//	*ClusterConnectionSpec_ExternalCluster
	ClusterConnection isClusterConnectionSpec_ClusterConnection `protobuf_oneof:"cluster_connection"`
}

func (x *ClusterConnectionSpec) Reset() {
	*x = ClusterConnectionSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_mdb_kafka_v1_connector_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterConnectionSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterConnectionSpec) ProtoMessage() {}

func (x *ClusterConnectionSpec) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_kafka_v1_connector_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterConnectionSpec.ProtoReflect.Descriptor instead.
func (*ClusterConnectionSpec) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_kafka_v1_connector_proto_rawDescGZIP(), []int{2}
}

func (x *ClusterConnectionSpec) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

func (m *ClusterConnectionSpec) GetClusterConnection() isClusterConnectionSpec_ClusterConnection {
	if m != nil {
		return m.ClusterConnection
	}
	return nil
}

func (x *ClusterConnectionSpec) GetThisCluster() *ThisClusterSpec {
	if x, ok := x.GetClusterConnection().(*ClusterConnectionSpec_ThisCluster); ok {
		return x.ThisCluster
	}
	return nil
}

func (x *ClusterConnectionSpec) GetExternalCluster() *ExternalClusterConnectionSpec {
	if x, ok := x.GetClusterConnection().(*ClusterConnectionSpec_ExternalCluster); ok {
		return x.ExternalCluster
	}
	return nil
}

type isClusterConnectionSpec_ClusterConnection interface {
	isClusterConnectionSpec_ClusterConnection()
}

type ClusterConnectionSpec_ThisCluster struct {
	// If type is 'this_cluster' - we connect to
	// cluster that is handle Kafka Connect Worker,
	// on which we try to register connector.
	ThisCluster *ThisClusterSpec `protobuf:"bytes,2,opt,name=this_cluster,json=thisCluster,proto3,oneof"`
}

type ClusterConnectionSpec_ExternalCluster struct {
	// If type is 'external_cluster' - we connect
	// to cluster that is not handle Kafka Connect Worker,
	// on which we try to register connector.
	ExternalCluster *ExternalClusterConnectionSpec `protobuf:"bytes,3,opt,name=external_cluster,json=externalCluster,proto3,oneof"`
}

func (*ClusterConnectionSpec_ThisCluster) isClusterConnectionSpec_ClusterConnection() {}

func (*ClusterConnectionSpec_ExternalCluster) isClusterConnectionSpec_ClusterConnection() {}

// Specification of cluster_connection
// type 'this_cluster'. This means
// that we already have all credentials,
// so this spec is empty.
type ThisClusterSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ThisClusterSpec) Reset() {
	*x = ThisClusterSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_mdb_kafka_v1_connector_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThisClusterSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThisClusterSpec) ProtoMessage() {}

func (x *ThisClusterSpec) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_kafka_v1_connector_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThisClusterSpec.ProtoReflect.Descriptor instead.
func (*ThisClusterSpec) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_kafka_v1_connector_proto_rawDescGZIP(), []int{3}
}

// Specification of connection to
// external cluster. It contains
// all necessary credentials to
// connect to external cluster.
type ExternalClusterConnectionSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List bootstrap servers of cluster,
	// separated by ','.
	BootstrapServers string `protobuf:"bytes,1,opt,name=bootstrap_servers,json=bootstrapServers,proto3" json:"bootstrap_servers,omitempty"`
	// Sasl username which
	// we use to connect to cluster.
	SaslUsername string `protobuf:"bytes,2,opt,name=sasl_username,json=saslUsername,proto3" json:"sasl_username,omitempty"`
	// Sasl password which we use
	// to connect to cluster.
	SaslPassword string `protobuf:"bytes,3,opt,name=sasl_password,json=saslPassword,proto3" json:"sasl_password,omitempty"`
	// Sasl mechanism, which we
	// should use to connect to cluster.
	SaslMechanism string `protobuf:"bytes,4,opt,name=sasl_mechanism,json=saslMechanism,proto3" json:"sasl_mechanism,omitempty"`
	// Security protocol, which
	// we should use to connect
	// to cluster.
	SecurityProtocol string `protobuf:"bytes,5,opt,name=security_protocol,json=securityProtocol,proto3" json:"security_protocol,omitempty"`
}

func (x *ExternalClusterConnectionSpec) Reset() {
	*x = ExternalClusterConnectionSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_mdb_kafka_v1_connector_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExternalClusterConnectionSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalClusterConnectionSpec) ProtoMessage() {}

func (x *ExternalClusterConnectionSpec) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_kafka_v1_connector_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalClusterConnectionSpec.ProtoReflect.Descriptor instead.
func (*ExternalClusterConnectionSpec) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_kafka_v1_connector_proto_rawDescGZIP(), []int{4}
}

func (x *ExternalClusterConnectionSpec) GetBootstrapServers() string {
	if x != nil {
		return x.BootstrapServers
	}
	return ""
}

func (x *ExternalClusterConnectionSpec) GetSaslUsername() string {
	if x != nil {
		return x.SaslUsername
	}
	return ""
}

func (x *ExternalClusterConnectionSpec) GetSaslPassword() string {
	if x != nil {
		return x.SaslPassword
	}
	return ""
}

func (x *ExternalClusterConnectionSpec) GetSaslMechanism() string {
	if x != nil {
		return x.SaslMechanism
	}
	return ""
}

func (x *ExternalClusterConnectionSpec) GetSecurityProtocol() string {
	if x != nil {
		return x.SecurityProtocol
	}
	return ""
}

// An Apache Kafka® connector resource.
type Connector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the connector.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Maximum number of tasks. Default is the number of brokers
	TasksMax *wrappers.Int64Value `protobuf:"bytes,2,opt,name=tasks_max,json=tasksMax,proto3" json:"tasks_max,omitempty"`
	// Properties passed with connector config to Connect service
	// Example: 'sync.topics.config.enabled: true'
	Properties map[string]string `protobuf:"bytes,3,rep,name=properties,proto3" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Connector health.
	Health Connector_Health `protobuf:"varint,4,opt,name=health,proto3,enum=yandex.cloud.mdb.kafka.v1.Connector_Health" json:"health,omitempty"`
	// Current status of the connector.
	Status Connector_Status `protobuf:"varint,5,opt,name=status,proto3,enum=yandex.cloud.mdb.kafka.v1.Connector_Status" json:"status,omitempty"`
	// ID of the Apache Kafka cluster that the connector belongs to.
	ClusterId string `protobuf:"bytes,6,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Additional settings
	// for specific connector.
	// For example, of MirrorMaker.
	//
	// Types that are assignable to ConnectorConfig:
	//	*Connector_ConnectorConfigMirrormaker
	ConnectorConfig isConnector_ConnectorConfig `protobuf_oneof:"connector_config"`
}

func (x *Connector) Reset() {
	*x = Connector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_mdb_kafka_v1_connector_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Connector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Connector) ProtoMessage() {}

func (x *Connector) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_kafka_v1_connector_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Connector.ProtoReflect.Descriptor instead.
func (*Connector) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_kafka_v1_connector_proto_rawDescGZIP(), []int{5}
}

func (x *Connector) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Connector) GetTasksMax() *wrappers.Int64Value {
	if x != nil {
		return x.TasksMax
	}
	return nil
}

func (x *Connector) GetProperties() map[string]string {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (x *Connector) GetHealth() Connector_Health {
	if x != nil {
		return x.Health
	}
	return Connector_HEALTH_UNKNOWN
}

func (x *Connector) GetStatus() Connector_Status {
	if x != nil {
		return x.Status
	}
	return Connector_STATUS_UNKNOWN
}

func (x *Connector) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (m *Connector) GetConnectorConfig() isConnector_ConnectorConfig {
	if m != nil {
		return m.ConnectorConfig
	}
	return nil
}

func (x *Connector) GetConnectorConfigMirrormaker() *ConnectorConfigMirrorMaker {
	if x, ok := x.GetConnectorConfig().(*Connector_ConnectorConfigMirrormaker); ok {
		return x.ConnectorConfigMirrormaker
	}
	return nil
}

type isConnector_ConnectorConfig interface {
	isConnector_ConnectorConfig()
}

type Connector_ConnectorConfigMirrormaker struct {
	ConnectorConfigMirrormaker *ConnectorConfigMirrorMaker `protobuf:"bytes,10,opt,name=connector_config_mirrormaker,json=connectorConfigMirrormaker,proto3,oneof"`
}

func (*Connector_ConnectorConfigMirrormaker) isConnector_ConnectorConfig() {}

// An An Apache Kafka® MirrorMaker
// connector resource.
type ConnectorConfigMirrorMaker struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Source cluster resource
	// settings.
	SourceCluster *ClusterConnection `protobuf:"bytes,1,opt,name=source_cluster,json=sourceCluster,proto3" json:"source_cluster,omitempty"`
	// Target cluster resource
	// settings.
	TargetCluster *ClusterConnection `protobuf:"bytes,2,opt,name=target_cluster,json=targetCluster,proto3" json:"target_cluster,omitempty"`
	// List of Kafka topics, separated by ','
	Topics string `protobuf:"bytes,3,opt,name=topics,proto3" json:"topics,omitempty"`
	// Replication factor for automatically created topics.
	ReplicationFactor *wrappers.Int64Value `protobuf:"bytes,4,opt,name=replication_factor,json=replicationFactor,proto3" json:"replication_factor,omitempty"`
}

func (x *ConnectorConfigMirrorMaker) Reset() {
	*x = ConnectorConfigMirrorMaker{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_mdb_kafka_v1_connector_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectorConfigMirrorMaker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectorConfigMirrorMaker) ProtoMessage() {}

func (x *ConnectorConfigMirrorMaker) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_kafka_v1_connector_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectorConfigMirrorMaker.ProtoReflect.Descriptor instead.
func (*ConnectorConfigMirrorMaker) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_kafka_v1_connector_proto_rawDescGZIP(), []int{6}
}

func (x *ConnectorConfigMirrorMaker) GetSourceCluster() *ClusterConnection {
	if x != nil {
		return x.SourceCluster
	}
	return nil
}

func (x *ConnectorConfigMirrorMaker) GetTargetCluster() *ClusterConnection {
	if x != nil {
		return x.TargetCluster
	}
	return nil
}

func (x *ConnectorConfigMirrorMaker) GetTopics() string {
	if x != nil {
		return x.Topics
	}
	return ""
}

func (x *ConnectorConfigMirrorMaker) GetReplicationFactor() *wrappers.Int64Value {
	if x != nil {
		return x.ReplicationFactor
	}
	return nil
}

// Resource ClusterConnection -
// settings of
// connection to clusters, that
// are source or target of MirrorMaker
// clusters.
type ClusterConnection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Alias of ClusterConnection resource.
	// For example: 'source', 'target', ...
	Alias string `protobuf:"bytes,1,opt,name=alias,proto3" json:"alias,omitempty"`
	// Type of connection to Kafka cluster.
	//
	// Types that are assignable to ClusterConnection:
	//	*ClusterConnection_ThisCluster
	//	*ClusterConnection_ExternalCluster
	ClusterConnection isClusterConnection_ClusterConnection `protobuf_oneof:"cluster_connection"`
}

func (x *ClusterConnection) Reset() {
	*x = ClusterConnection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_mdb_kafka_v1_connector_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterConnection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterConnection) ProtoMessage() {}

func (x *ClusterConnection) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_kafka_v1_connector_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterConnection.ProtoReflect.Descriptor instead.
func (*ClusterConnection) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_kafka_v1_connector_proto_rawDescGZIP(), []int{7}
}

func (x *ClusterConnection) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

func (m *ClusterConnection) GetClusterConnection() isClusterConnection_ClusterConnection {
	if m != nil {
		return m.ClusterConnection
	}
	return nil
}

func (x *ClusterConnection) GetThisCluster() *ThisCluster {
	if x, ok := x.GetClusterConnection().(*ClusterConnection_ThisCluster); ok {
		return x.ThisCluster
	}
	return nil
}

func (x *ClusterConnection) GetExternalCluster() *ExternalClusterConnection {
	if x, ok := x.GetClusterConnection().(*ClusterConnection_ExternalCluster); ok {
		return x.ExternalCluster
	}
	return nil
}

type isClusterConnection_ClusterConnection interface {
	isClusterConnection_ClusterConnection()
}

type ClusterConnection_ThisCluster struct {
	// If type is 'this_cluster' - we connect to
	// cluster that is handle Kafka Connect Worker,
	// on which we try to register connector.
	ThisCluster *ThisCluster `protobuf:"bytes,2,opt,name=this_cluster,json=thisCluster,proto3,oneof"`
}

type ClusterConnection_ExternalCluster struct {
	// If type is 'external_cluster' - we connect
	// to cluster that is not handle Kafka Connect Worker,
	// on which we try to register connector.
	ExternalCluster *ExternalClusterConnection `protobuf:"bytes,3,opt,name=external_cluster,json=externalCluster,proto3,oneof"`
}

func (*ClusterConnection_ThisCluster) isClusterConnection_ClusterConnection() {}

func (*ClusterConnection_ExternalCluster) isClusterConnection_ClusterConnection() {}

// Resource of cluster_connection
// type 'this_cluster'.
type ThisCluster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ThisCluster) Reset() {
	*x = ThisCluster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_mdb_kafka_v1_connector_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThisCluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThisCluster) ProtoMessage() {}

func (x *ThisCluster) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_kafka_v1_connector_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThisCluster.ProtoReflect.Descriptor instead.
func (*ThisCluster) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_kafka_v1_connector_proto_rawDescGZIP(), []int{8}
}

// Resource of connection to
// external cluster. It contains
// all settings of connection
// to external cluster.
type ExternalClusterConnection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List bootstrap servers of cluster,
	// separated by ','
	BootstrapServers string `protobuf:"bytes,1,opt,name=bootstrap_servers,json=bootstrapServers,proto3" json:"bootstrap_servers,omitempty"`
	// Sasl username which
	// we use to connect to cluster.
	SaslUsername string `protobuf:"bytes,2,opt,name=sasl_username,json=saslUsername,proto3" json:"sasl_username,omitempty"`
	// Sasl mechanism, which we
	// should use to connect to cluster.
	SaslMechanism string `protobuf:"bytes,4,opt,name=sasl_mechanism,json=saslMechanism,proto3" json:"sasl_mechanism,omitempty"`
	// Security protocol, which
	// we should use to connect
	// to cluster.
	SecurityProtocol string `protobuf:"bytes,5,opt,name=security_protocol,json=securityProtocol,proto3" json:"security_protocol,omitempty"`
}

func (x *ExternalClusterConnection) Reset() {
	*x = ExternalClusterConnection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_mdb_kafka_v1_connector_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExternalClusterConnection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalClusterConnection) ProtoMessage() {}

func (x *ExternalClusterConnection) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_kafka_v1_connector_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalClusterConnection.ProtoReflect.Descriptor instead.
func (*ExternalClusterConnection) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_kafka_v1_connector_proto_rawDescGZIP(), []int{9}
}

func (x *ExternalClusterConnection) GetBootstrapServers() string {
	if x != nil {
		return x.BootstrapServers
	}
	return ""
}

func (x *ExternalClusterConnection) GetSaslUsername() string {
	if x != nil {
		return x.SaslUsername
	}
	return ""
}

func (x *ExternalClusterConnection) GetSaslMechanism() string {
	if x != nil {
		return x.SaslMechanism
	}
	return ""
}

func (x *ExternalClusterConnection) GetSecurityProtocol() string {
	if x != nil {
		return x.SecurityProtocol
	}
	return ""
}

var File_yandex_cloud_mdb_kafka_v1_connector_proto protoreflect.FileDescriptor

var file_yandex_cloud_mdb_kafka_v1_connector_proto_rawDesc = []byte{
	0x0a, 0x29, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x6d,
	0x64, 0x62, 0x2f, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x19, 0x79, 0x61, 0x6e,
	0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x6b, 0x61,
	0x66, 0x6b, 0x61, 0x2e, 0x76, 0x31, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x89, 0x03, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x53, 0x70, 0x65, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x09,
	0x74, 0x61, 0x73, 0x6b, 0x73, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x74, 0x61,
	0x73, 0x6b, 0x73, 0x4d, 0x61, 0x78, 0x12, 0x58, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x79, 0x61, 0x6e,
	0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x6b, 0x61,
	0x66, 0x6b, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x53, 0x70, 0x65, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x12, 0x7d, 0x0a, 0x1c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x6d, 0x61, 0x6b, 0x65, 0x72,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x61, 0x6b, 0x65, 0x72, 0x53, 0x70, 0x65,
	0x63, 0x48, 0x00, 0x52, 0x1a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x1a,
	0x3d, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x12,
	0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x22, 0xb6, 0x02, 0x0a, 0x1e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x61, 0x6b, 0x65,
	0x72, 0x53, 0x70, 0x65, 0x63, 0x12, 0x57, 0x0a, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e,
	0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62,
	0x2e, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x52,
	0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x57,
	0x0a, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x52, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x6f, 0x70, 0x69, 0x63,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x12,
	0x4a, 0x0a, 0x12, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x22, 0xfb, 0x01, 0x0a, 0x15,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x70, 0x65, 0x63, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x4f, 0x0a, 0x0c, 0x74,
	0x68, 0x69, 0x73, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x68,
	0x69, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x48, 0x00, 0x52,
	0x0b, 0x74, 0x68, 0x69, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x65, 0x0a, 0x10,
	0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63,
	0x48, 0x00, 0x52, 0x0f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x42, 0x14, 0x0a, 0x12, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x11, 0x0a, 0x0f, 0x54, 0x68, 0x69,
	0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x22, 0xea, 0x01, 0x0a,
	0x1d, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x12, 0x2b,
	0x0a, 0x11, 0x62, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x62, 0x6f, 0x6f, 0x74, 0x73,
	0x74, 0x72, 0x61, 0x70, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x73,
	0x61, 0x73, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x73, 0x61, 0x73, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x73, 0x61, 0x73, 0x6c, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x61, 0x73, 0x6c, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x61, 0x73, 0x6c, 0x5f, 0x6d, 0x65,
	0x63, 0x68, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73,
	0x61, 0x73, 0x6c, 0x4d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x12, 0x2b, 0x0a, 0x11,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x22, 0x9b, 0x05, 0x0a, 0x09, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x74,
	0x61, 0x73, 0x6b, 0x73, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x74, 0x61, 0x73,
	0x6b, 0x73, 0x4d, 0x61, 0x78, 0x12, 0x54, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x79, 0x61, 0x6e, 0x64,
	0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x6b, 0x61, 0x66,
	0x6b, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x43, 0x0a, 0x06, 0x68,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x79, 0x61,
	0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x6b,
	0x61, 0x66, 0x6b, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x06, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x12, 0x43, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2b, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x6d, 0x64, 0x62, 0x2e, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x79, 0x0a, 0x1c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x6d,
	0x61, 0x6b, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x79, 0x61, 0x6e,
	0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x6b, 0x61,
	0x66, 0x6b, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x61, 0x6b, 0x65,
	0x72, 0x48, 0x00, 0x52, 0x1a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x1a,
	0x3d, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x31,
	0x0a, 0x06, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x0e, 0x48, 0x45, 0x41, 0x4c,
	0x54, 0x48, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05,
	0x41, 0x4c, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x45, 0x41, 0x44, 0x10,
	0x02, 0x22, 0x40, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x0e, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x0b, 0x0a, 0x07, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x41, 0x55, 0x53, 0x45,
	0x44, 0x10, 0x03, 0x42, 0x12, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xaa, 0x02, 0x0a, 0x1a, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x69, 0x72, 0x72, 0x6f,
	0x72, 0x4d, 0x61, 0x6b, 0x65, 0x72, 0x12, 0x53, 0x0a, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64,
	0x62, 0x2e, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x53, 0x0a, 0x0e, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x12, 0x16, 0x0a, 0x06, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x12, 0x4a, 0x0a, 0x12, 0x72, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x11, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x22, 0xef, 0x01, 0x0a, 0x11, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c,
	0x69, 0x61, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73,
	0x12, 0x4b, 0x0a, 0x0c, 0x74, 0x68, 0x69, 0x73, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x68, 0x69, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x48, 0x00,
	0x52, 0x0b, 0x74, 0x68, 0x69, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x61, 0x0a,
	0x10, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x6b, 0x61, 0x66, 0x6b, 0x61,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52,
	0x0f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x42, 0x14, 0x0a, 0x12, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x0d, 0x0a, 0x0b, 0x54, 0x68, 0x69, 0x73, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x22, 0xc1, 0x01, 0x0a, 0x19, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x11, 0x62, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x62, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73,
	0x12, 0x23, 0x0a, 0x0d, 0x73, 0x61, 0x73, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x61, 0x73, 0x6c, 0x55, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x61, 0x73, 0x6c, 0x5f, 0x6d, 0x65,
	0x63, 0x68, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73,
	0x61, 0x73, 0x6c, 0x4d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x12, 0x2b, 0x0a, 0x11,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x42, 0x64, 0x0a, 0x1d, 0x79, 0x61, 0x6e,
	0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x64,
	0x62, 0x2e, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x2e, 0x76, 0x31, 0x5a, 0x43, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2d, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2f, 0x67, 0x6f, 0x2d, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x6d, 0x64, 0x62,
	0x2f, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x2f, 0x76, 0x31, 0x3b, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_yandex_cloud_mdb_kafka_v1_connector_proto_rawDescOnce sync.Once
	file_yandex_cloud_mdb_kafka_v1_connector_proto_rawDescData = file_yandex_cloud_mdb_kafka_v1_connector_proto_rawDesc
)

func file_yandex_cloud_mdb_kafka_v1_connector_proto_rawDescGZIP() []byte {
	file_yandex_cloud_mdb_kafka_v1_connector_proto_rawDescOnce.Do(func() {
		file_yandex_cloud_mdb_kafka_v1_connector_proto_rawDescData = protoimpl.X.CompressGZIP(file_yandex_cloud_mdb_kafka_v1_connector_proto_rawDescData)
	})
	return file_yandex_cloud_mdb_kafka_v1_connector_proto_rawDescData
}

var file_yandex_cloud_mdb_kafka_v1_connector_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_yandex_cloud_mdb_kafka_v1_connector_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_yandex_cloud_mdb_kafka_v1_connector_proto_goTypes = []interface{}{
	(Connector_Health)(0),                  // 0: yandex.cloud.mdb.kafka.v1.Connector.Health
	(Connector_Status)(0),                  // 1: yandex.cloud.mdb.kafka.v1.Connector.Status
	(*ConnectorSpec)(nil),                  // 2: yandex.cloud.mdb.kafka.v1.ConnectorSpec
	(*ConnectorConfigMirrorMakerSpec)(nil), // 3: yandex.cloud.mdb.kafka.v1.ConnectorConfigMirrorMakerSpec
	(*ClusterConnectionSpec)(nil),          // 4: yandex.cloud.mdb.kafka.v1.ClusterConnectionSpec
	(*ThisClusterSpec)(nil),                // 5: yandex.cloud.mdb.kafka.v1.ThisClusterSpec
	(*ExternalClusterConnectionSpec)(nil),  // 6: yandex.cloud.mdb.kafka.v1.ExternalClusterConnectionSpec
	(*Connector)(nil),                      // 7: yandex.cloud.mdb.kafka.v1.Connector
	(*ConnectorConfigMirrorMaker)(nil),     // 8: yandex.cloud.mdb.kafka.v1.ConnectorConfigMirrorMaker
	(*ClusterConnection)(nil),              // 9: yandex.cloud.mdb.kafka.v1.ClusterConnection
	(*ThisCluster)(nil),                    // 10: yandex.cloud.mdb.kafka.v1.ThisCluster
	(*ExternalClusterConnection)(nil),      // 11: yandex.cloud.mdb.kafka.v1.ExternalClusterConnection
	nil,                                    // 12: yandex.cloud.mdb.kafka.v1.ConnectorSpec.PropertiesEntry
	nil,                                    // 13: yandex.cloud.mdb.kafka.v1.Connector.PropertiesEntry
	(*wrappers.Int64Value)(nil),            // 14: google.protobuf.Int64Value
}
var file_yandex_cloud_mdb_kafka_v1_connector_proto_depIdxs = []int32{
	14, // 0: yandex.cloud.mdb.kafka.v1.ConnectorSpec.tasks_max:type_name -> google.protobuf.Int64Value
	12, // 1: yandex.cloud.mdb.kafka.v1.ConnectorSpec.properties:type_name -> yandex.cloud.mdb.kafka.v1.ConnectorSpec.PropertiesEntry
	3,  // 2: yandex.cloud.mdb.kafka.v1.ConnectorSpec.connector_config_mirrormaker:type_name -> yandex.cloud.mdb.kafka.v1.ConnectorConfigMirrorMakerSpec
	4,  // 3: yandex.cloud.mdb.kafka.v1.ConnectorConfigMirrorMakerSpec.source_cluster:type_name -> yandex.cloud.mdb.kafka.v1.ClusterConnectionSpec
	4,  // 4: yandex.cloud.mdb.kafka.v1.ConnectorConfigMirrorMakerSpec.target_cluster:type_name -> yandex.cloud.mdb.kafka.v1.ClusterConnectionSpec
	14, // 5: yandex.cloud.mdb.kafka.v1.ConnectorConfigMirrorMakerSpec.replication_factor:type_name -> google.protobuf.Int64Value
	5,  // 6: yandex.cloud.mdb.kafka.v1.ClusterConnectionSpec.this_cluster:type_name -> yandex.cloud.mdb.kafka.v1.ThisClusterSpec
	6,  // 7: yandex.cloud.mdb.kafka.v1.ClusterConnectionSpec.external_cluster:type_name -> yandex.cloud.mdb.kafka.v1.ExternalClusterConnectionSpec
	14, // 8: yandex.cloud.mdb.kafka.v1.Connector.tasks_max:type_name -> google.protobuf.Int64Value
	13, // 9: yandex.cloud.mdb.kafka.v1.Connector.properties:type_name -> yandex.cloud.mdb.kafka.v1.Connector.PropertiesEntry
	0,  // 10: yandex.cloud.mdb.kafka.v1.Connector.health:type_name -> yandex.cloud.mdb.kafka.v1.Connector.Health
	1,  // 11: yandex.cloud.mdb.kafka.v1.Connector.status:type_name -> yandex.cloud.mdb.kafka.v1.Connector.Status
	8,  // 12: yandex.cloud.mdb.kafka.v1.Connector.connector_config_mirrormaker:type_name -> yandex.cloud.mdb.kafka.v1.ConnectorConfigMirrorMaker
	9,  // 13: yandex.cloud.mdb.kafka.v1.ConnectorConfigMirrorMaker.source_cluster:type_name -> yandex.cloud.mdb.kafka.v1.ClusterConnection
	9,  // 14: yandex.cloud.mdb.kafka.v1.ConnectorConfigMirrorMaker.target_cluster:type_name -> yandex.cloud.mdb.kafka.v1.ClusterConnection
	14, // 15: yandex.cloud.mdb.kafka.v1.ConnectorConfigMirrorMaker.replication_factor:type_name -> google.protobuf.Int64Value
	10, // 16: yandex.cloud.mdb.kafka.v1.ClusterConnection.this_cluster:type_name -> yandex.cloud.mdb.kafka.v1.ThisCluster
	11, // 17: yandex.cloud.mdb.kafka.v1.ClusterConnection.external_cluster:type_name -> yandex.cloud.mdb.kafka.v1.ExternalClusterConnection
	18, // [18:18] is the sub-list for method output_type
	18, // [18:18] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_yandex_cloud_mdb_kafka_v1_connector_proto_init() }
func file_yandex_cloud_mdb_kafka_v1_connector_proto_init() {
	if File_yandex_cloud_mdb_kafka_v1_connector_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_yandex_cloud_mdb_kafka_v1_connector_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectorSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_mdb_kafka_v1_connector_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectorConfigMirrorMakerSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_mdb_kafka_v1_connector_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterConnectionSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_mdb_kafka_v1_connector_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThisClusterSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_mdb_kafka_v1_connector_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExternalClusterConnectionSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_mdb_kafka_v1_connector_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Connector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_mdb_kafka_v1_connector_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectorConfigMirrorMaker); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_mdb_kafka_v1_connector_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterConnection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_mdb_kafka_v1_connector_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThisCluster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_mdb_kafka_v1_connector_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExternalClusterConnection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_yandex_cloud_mdb_kafka_v1_connector_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*ConnectorSpec_ConnectorConfigMirrormaker)(nil),
	}
	file_yandex_cloud_mdb_kafka_v1_connector_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*ClusterConnectionSpec_ThisCluster)(nil),
		(*ClusterConnectionSpec_ExternalCluster)(nil),
	}
	file_yandex_cloud_mdb_kafka_v1_connector_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*Connector_ConnectorConfigMirrormaker)(nil),
	}
	file_yandex_cloud_mdb_kafka_v1_connector_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*ClusterConnection_ThisCluster)(nil),
		(*ClusterConnection_ExternalCluster)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_yandex_cloud_mdb_kafka_v1_connector_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_yandex_cloud_mdb_kafka_v1_connector_proto_goTypes,
		DependencyIndexes: file_yandex_cloud_mdb_kafka_v1_connector_proto_depIdxs,
		EnumInfos:         file_yandex_cloud_mdb_kafka_v1_connector_proto_enumTypes,
		MessageInfos:      file_yandex_cloud_mdb_kafka_v1_connector_proto_msgTypes,
	}.Build()
	File_yandex_cloud_mdb_kafka_v1_connector_proto = out.File
	file_yandex_cloud_mdb_kafka_v1_connector_proto_rawDesc = nil
	file_yandex_cloud_mdb_kafka_v1_connector_proto_goTypes = nil
	file_yandex_cloud_mdb_kafka_v1_connector_proto_depIdxs = nil
}
